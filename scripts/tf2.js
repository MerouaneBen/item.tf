// Generated by CoffeeScript 1.6.3
(function() {
  var HoverBox, ItemBox, ajax, capitalize, escapeHTML, getAjaxRequest, getAttributes, getCookie, getDescription, getMarketPrice, getTags, postAjax, root, setCookie,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  capitalize = function(word) {
    return word[0].toUpperCase() + word.slice(1);
  };

  escapeHTML = function(string) {
    return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  getAttributes = function(item) {
    var divs;
    divs = item.getElementsByTagName('div');
    if (divs.length) {
      return divs[0].innerHTML;
    } else {
      return '';
    }
  };

  getDescription = function(item) {
    return item.getAttribute('data-description') || '';
  };

  getTags = function(item) {
    return (item.getAttribute('data-tags') || '').split(',');
  };

  getMarketPrice = function(item, source) {
    var denom, denomMatch, i, marketPrice, priceList, re, _i, _j, _len, _len1, _ref, _ref1;
    marketPrice = item.getAttribute("data-" + source) || '';
    if (marketPrice) {
      priceList = [];
      _ref = marketPrice.split(', ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        denomMatch = i.match(/(Refined|Key(s)?|Bud(s)?)/g);
        if (!denomMatch) {
          priceList.push(i);
          continue;
        }
        denom = denomMatch[0];
        priceList.push(i.replace(/(\d+(\.\d+)?)/g, "<a href=\"/search?q=\$1%20" + denom + "\"\n target='_blank' class='glow'>\$1</a>"));
      }
      marketPrice = priceList.join(', ').replace(/[{}']/g, '').replace(/, /g, '<br>');
      _ref1 = ['Unique', 'Vintage', 'Strange', 'Genuine', 'Haunted', 'Unusual'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        re = new RegExp(i, "g");
        marketPrice = marketPrice.replace(re, "<span class='" + (i.toLowerCase()) + "'>" + i + "</span>");
      }
    }
    return marketPrice;
  };

  ItemBox = (function() {
    function ItemBox(showLink) {
      var _ref;
      if (showLink == null) {
        showLink = true;
      }
      this.showLink = showLink;
      this.loggedInId = getCookie('steam_id');
      this.isOwnPage = this.loggedInId && this.loggedInId === ((_ref = document.getElementById('steamid')) != null ? _ref.getAttribute('data-id') : void 0);
      this.itemBox = document.createElement('div');
      this.itemBox.id = 'itembox';
      document.getElementById('container').appendChild(this.itemBox);
    }

    ItemBox.prototype.show = function(item) {
      this.id = item.getAttribute('data-index');
      this.name = item.title;
      this.description = getDescription(item);
      this.storePrice = item.getAttribute('data-storeprice');
      this.imageUrl = item.getAttribute('data-image');
      this.blueprints = item.getElementsByTagName('ul');
      this.classes = item.getAttribute('data-classes');
      this.tags = getTags(item);
      this.item = item;
      this.cookiePrice = getCookie('price_source');
      this.source = this.cookiePrice || 'backpack.tf';
      this.altSource = this.source === 'spreadsheet' ? 'backpack.tf' : 'spreadsheet';
      this._generateItemBox();
      return this.itemBox.style.display = 'block';
    };

    ItemBox.prototype.hide = function() {
      return this.itemBox.style.display = 'none';
    };

    ItemBox.prototype._tagsHTML = function() {
      var i, image, isToken, isWeapon, tagsHTML, title, _i, _j, _len, _len1, _ref, _ref1;
      tagsHTML = "<div id='tags' style='position:absolute;top:-5px;left:5px'>";
      if (this.tags.length) {
        isWeapon = __indexOf.call(this.tags, 'weapon') >= 0;
        isToken = __indexOf.call(this.tags, 'token') >= 0;
        title = image = '';
        _ref = ['primary', 'secondary', 'melee', 'pda2'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (__indexOf.call(this.tags, i) >= 0) {
            if (isWeapon) {
              title = capitalize(i) + ' Weapon';
              image = i;
            } else if (isToken) {
              title = 'Slot Token';
              image = 'slot-token';
            }
          }
        }
        _ref1 = ['hat', 'misc', 'tool', 'bundle'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          if (__indexOf.call(this.tags, i) >= 0) {
            title = capitalize(i);
            image = i;
          }
        }
        if (isToken && this.classes) {
          title = 'Class Token';
          image = 'class-token';
        }
        if (title && image) {
          tagsHTML += "<a href='/search?q=" + (encodeURIComponent(title)) + "'\n target='_blank' title='" + title + "' class='" + image + "'></a>";
        }
        tagsHTML += "</div>";
      }
      return tagsHTML;
    };

    ItemBox.prototype._nameHTML = function() {
      var nameHTML;
      nameHTML = this.name;
      if (this.showLink) {
        nameHTML = "<a href='/item/" + this.id + "'\n target='_blank' class='glow' title='Go to Item Page'>\n" + nameHTML + "</a>";
      }
      nameHTML = "<h2 id='itemname'>" + nameHTML + "</h2>";
      return nameHTML;
    };

    ItemBox.prototype._classesHTML = function() {
      var classesHTML, i, _i, _len, _ref;
      classesHTML = "<div id='classes' style='position:absolute;top:0;right:0'>";
      if (this.classes) {
        _ref = this.classes.split(',');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          classesHTML += "<a href='/search?q=" + i + "' target='_blank'\n class='" + (i.toLowerCase()) + "'></a>";
        }
      }
      classesHTML += '</div>';
      return classesHTML;
    };

    ItemBox.prototype._bundleHTML = function() {
      var bundleHTML;
      if (__indexOf.call(this.tags, 'bundle') >= 0 && this.description.indexOf('---') !== -1) {
        bundleHTML = "<a href=\"/search?q=" + (encodeURIComponent(this.name)) + "%20Set\"\n target='_blank'>\n<div class='rounded glow' style='display: inline-block; padding: 7px;'>\nView items\n</div>\n</a>";
      } else {
        bundleHTML = '';
      }
      return bundleHTML;
    };

    ItemBox.prototype._pricesHTML = function() {
      var classifiedsURL, pricesHTML, _ref;
      pricesHTML = getMarketPrice(this.item, this.source);
      if (!pricesHTML) {
        _ref = [this.altSource, this.source], this.source = _ref[0], this.altSource = _ref[1];
        pricesHTML = getMarketPrice(this.item, this.source);
      }
      classifiedsURL = "http://backpack.tf/classifieds/search/" + (encodeURIComponent(this.name));
      if (pricesHTML) {
        pricesHTML = "<div id='marketprice'>\n<span id='pricesource'>" + (capitalize(this.source)) + "</span><br>\n<a href='" + classifiedsURL + "'\n id='classifieds' class='rounded-tight glow'\n target='_blank' style='color:rgb(129, 170, 197);display:none'>\nClassifieds\n</a>\n<h3 id='prices'>" + pricesHTML + "</h3>\n</div>";
      }
      return pricesHTML;
    };

    ItemBox.prototype._blueprintsHTML = function() {
      var b, blueprintsHTML, chance, i, index, j, listItem, name, style, url, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2;
      blueprintsHTML = '';
      if (this.blueprints.length) {
        blueprintsHTML = '<div id="blueprints">';
        _ref = this.blueprints;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          chance = b.getAttribute('data-chance');
          blueprintsHTML += '<div class="blueprint">';
          _ref1 = b.getElementsByTagName('li');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            i = _ref1[_j];
            for (j = _k = 0, _ref2 = i.getAttribute('data-count'); 0 <= _ref2 ? _k < _ref2 : _k > _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
              name = i.title;
              index = i.getAttribute('data-index');
              style = "background-image:url(" + (i.getAttribute('data-image')) + ");";
              listItem = "<div title=\"" + name + "\" class='item-small' style='" + style + "'></div>";
              if (index) {
                url = "/item/" + index;
              } else {
                name = name.replace('Any ', '').replace('Spy Watch', 'PDA2 Weapon');
                if (name.split(' ').length > 2) {
                  name = name.replace('Weapon', 'Set');
                }
                url = "/search?q=" + (encodeURIComponent(name));
              }
              listItem = "<a href=\"" + url + "\" target='_blank'>" + listItem + "</a>";
              blueprintsHTML += listItem;
            }
          }
          blueprintsHTML += "<div title='Crafting Chance' style='position:absolute;right:10px;'>\n<h3>" + chance + "%</h3></div></div>";
        }
        blueprintsHTML += '</div>';
      }
      return blueprintsHTML;
    };

    ItemBox.prototype._wishlistHTML = function() {
      var wishlistHTML;
      if (this.loggedInId) {
        wishlistHTML = "<div style='display: inline-block; width: 40px'>\n<div id='wishlistmessage'\n style='display: none;margin:0 0 4px -18px'>Added</div>\n<i id='wishlistbutton' class='button-icon rounded icon-star icon-large'\n style='background-color: transparent'\n title='Add to wishlist'></i>\n</div>";
      } else {
        wishlistHTML = '';
      }
      return wishlistHTML;
    };

    ItemBox.prototype._buyHTML = function() {
      var buyHTML;
      if (this.storePrice) {
        buyHTML = "<div id='buy'>\n<form style='display:inline-block'>$" + this.storePrice + "<br>\n<input type='text' value='1' size='1' id='quantity'\n class='textbox' style='text-align: right'>\n</form><a href='#' id='buybutton'></a></div>";
      } else {
        buyHTML = '';
      }
      return buyHTML;
    };

    ItemBox.prototype._marketPriceLink = function() {
      var classifieds, priceButton,
        _this = this;
      priceButton = document.getElementById('pricesource');
      classifieds = document.getElementById('classifieds');
      if (classifieds && this.source === 'backpack.tf') {
        classifieds.style.display = 'inline';
      }
      if (priceButton && this.item.getAttribute("data-" + this.altSource)) {
        priceButton.style.cursor = 'pointer';
        priceButton.onclick = function() {
          _this.altSource = priceButton.innerHTML === 'Spreadsheet' ? 'backpack.tf' : 'spreadsheet';
          priceButton.innerHTML = capitalize(_this.altSource);
          _this.prices.innerHTML = getMarketPrice(_this.item, _this.altSource);
          if (_this.altSource === 'backpack.tf') {
            return classifieds.style.display = 'inline';
          } else {
            return classifieds.style.display = 'none';
          }
        };
        priceButton.onmouseover = function() {
          return priceButton.style.textShadow = '0 0 10px rgb(196, 241, 128)';
        };
        return priceButton.onmouseout = function() {
          return priceButton.style.textShadow = '';
        };
      }
    };

    ItemBox.prototype._outpostLink = function() {
      var _this = this;
      if (window.navigator.userAgent.indexOf('Valve Steam GameOverlay') === -1) {
        this.form.setAttribute('target', '_blank');
      }
      return document.getElementById('find-trades-btn').onclick = function(event) {
        var tradeType;
        tradeType = document.getElementById('tradetype').value;
        _this.form.json.value = "{\"filters\":{},\"" + tradeType + "\":\"440," + _this.id + "," + _this.form.quality.value + "\"}";
        return _this.form.submit.click();
      };
    };

    ItemBox.prototype._wishlistLink = function() {
      var idx, wish, wishIndex, wishlistAction, wishlistButton, _i, _len, _ref,
        _this = this;
      if (this.isOwnPage) {
        wishIndex = this.item.getAttribute('data-i');
        _ref = document.getElementsByClassName('item');
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          wish = _ref[idx];
          if (wish.getAttribute('data-i') === wishIndex) {
            wishIndex = idx.toString();
            break;
          }
        }
      }
      if (this._wishlistHTML()) {
        wishlistAction = '/wishlist/add';
        wishlistButton = document.getElementById('wishlistbutton');
        if (this.isOwnPage) {
          wishlistAction = '/wishlist/remove';
          wishlistButton.setAttribute('title', 'Remove from wishlist');
        }
        return wishlistButton.onclick = function() {
          var wishlistData;
          wishlistData = {
            'index': _this.id,
            'quality': _this.form.quality.value
          };
          if (_this.isOwnPage) {
            wishlistData = {
              'i': wishIndex
            };
          }
          return postAjax(wishlistAction, wishlistData, function(response) {
            var wishlistMessage;
            if (response === 'Added') {
              wishlistMessage = document.getElementById('wishlistmessage');
              wishlistMessage.style.display = 'block';
              wishlistMessage.setAttribute('class', 'animated fadeInLeft');
              return setTimeout((function() {
                return wishlistMessage.setAttribute('class', 'animated fadeOut');
              }), 1000);
            } else if (response === 'Removed') {
              _this.hide();
              return _this.item.parentNode.removeChild(_this.item);
            }
          });
        };
      }
    };

    ItemBox.prototype._buyLink = function() {
      var buyButton,
        _this = this;
      buyButton = document.getElementById('buybutton');
      if (buyButton) {
        return buyButton.onclick = function() {
          var quantity;
          quantity = document.getElementById('quantity').value;
          return window.open("http://store.steampowered.com/buyitem/440/" + _this.id + "/" + quantity);
        };
      }
    };

    ItemBox.prototype._generateItemBox = function() {
      var hoverArea, i, option, qualityNo, ref, wikiLink, _i, _len, _ref, _results;
      wikiLink = "http://wiki.teamfortress.com/wiki/" + (encodeURIComponent(this.name));
      this.itemBox.innerHTML = "" + (this._tagsHTML()) + "\n" + (this._nameHTML()) + "\n" + (this._classesHTML()) + "\n" + (this._bundleHTML()) + "\n" + (this._pricesHTML()) + "\n" + (this._blueprintsHTML()) + "\n<div id='buttons'>\n\n<a class='icon-info icon-large button-icon' target='_blank'\n title='Open in Wiki' href=\"" + wikiLink + "\"></a>\n\n<a class='icon-shopping-cart icon-large button-icon'\n target='_blank' title='Community Market'\n href=\"http://steamcommunity.com/market/search?q=appid%3A440\n%20" + (encodeURIComponent(this.name)) + "\"></a>\n\n<a href='#' id='find-trades-btn'\n class='icon-exchange icon-large button-icon' title='Find Trades'></a>\n\n<form name='tf2outpostform' method='POST' style='display:inline-block'\n action='http://www.tf2outpost.com/search'>\n\n<input type='hidden' name='json'>\n<input type='hidden' name='type' value='any'>\n<input type='submit' name='submit' value='Search' style='display:none'>\n\n<select id='tradetype' class='textbox'>\n  <option value='has1'>Want</option>\n  <option value='wants1'>Have</option>\n</select>\n\n<select id='quality' class='textbox'>\n  <option value='6'>Unique</option>\n  <option value='3'>Vintage</option>\n  <option value='11'>Strange</option>\n  <option value='1'>Genuine</option>\n  <option value='13'>Haunted</option>\n  <option value='5'>Unusual</option>\n</select>\n\n</form>\n\n" + (this._wishlistHTML()) + "\n</div>\n" + (this._buyHTML());
      this.form = document.tf2outpostform;
      this.prices = document.getElementById('prices');
      this._marketPriceLink();
      this._outpostLink();
      this._wishlistLink();
      this._buyLink();
      hoverArea = document.createElement('div');
      hoverArea.title = this.name;
      hoverArea.setAttribute('data-description', this.description);
      hoverArea.setAttribute('data-tags', this.tags);
      hoverArea.id = 'hoverarea';
      hoverArea.style.backgroundImage = "url('" + this.imageUrl + "')";
      this.hoverBox = new HoverBox(hoverArea);
      ref = document.getElementById('blueprints') || document.getElementById('buttons');
      this.itemBox.insertBefore(hoverArea, ref);
      if (this.name.indexOf('Strange') === -1) {
        qualityNo = this.item.getAttribute('class').match(/quality-(\d+)/);
        if (qualityNo) {
          return this.form.quality.value = qualityNo[1];
        } else if (this.prices) {
          _ref = this.form.quality.options;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            option = _ref[i];
            if (this.prices.innerHTML.indexOf(option.innerHTML) !== -1) {
              this.form.quality.selectedIndex = i;
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    };

    return ItemBox;

  })();

  HoverBox = (function() {
    function HoverBox(itemBoxOrElem) {
      this._clickItem = __bind(this._clickItem, this);
      this._moveMouse = __bind(this._moveMouse, this);
      this._hideItemBox = __bind(this._hideItemBox, this);
      this._hide = __bind(this._hide, this);
      this._show = __bind(this._show, this);
      var elem;
      this.itemBox = itemBoxOrElem instanceof ItemBox ? itemBoxOrElem : null;
      if (!this.itemBox) {
        elem = itemBoxOrElem;
      }
      this.hoverBox = document.getElementById('hoverbox');
      if (!this.hoverBox) {
        this.hoverBox = document.createElement('div');
        this.hoverBox.id = 'hoverbox';
        document.getElementById('container').appendChild(this.hoverBox);
      }
      this._add(elem);
    }

    HoverBox.prototype._add = function(elem) {
      var item, list, _i, _len,
        _this = this;
      list = elem ? [elem] : document.getElementsByClassName('item');
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        item.addEventListener("mouseout", this._hide, false);
        item.addEventListener("mousemove", this._moveMouse, false);
        item.addEventListener("mouseover", this._show, false);
        if (!elem) {
          item.addEventListener("click", this._clickItem, false);
        }
      }
      if (!elem) {
        document.getElementById('container').addEventListener("click", this._hideItemBox, false);
        return document.onkeydown = function(e) {
          if (e.keyCode === 27) {
            return _this.itemBox.hide();
          }
        };
      }
    };

    HoverBox.prototype._show = function(e) {
      var attributes, descList, description, title;
      title = e.target.title;
      attributes = getAttributes(e.target);
      description = escapeHTML(getDescription(e.target));
      if (description) {
        if (__indexOf.call(getTags(e.target), 'bundle') >= 0 && description.indexOf('---') !== -1) {
          descList = description.split('---');
          description = "" + descList[0] + "<br>\n<span style='color:#95af0c'>" + descList[1] + "</span>";
        }
        description = "<br>" + description;
      }
      this.hoverBox.innerHTML = "<div style='font-size:1.2em;color:rgb(230,230,230)'>" + title + "</div>" + attributes + description;
      return this.hoverBox.style.display = 'block';
    };

    HoverBox.prototype._hide = function() {
      return this.hoverBox.style.display = 'none';
    };

    HoverBox.prototype._hideItemBox = function(e) {
      var a, els, _ref;
      a = e.target;
      if (a.getAttribute('class') !== 'item') {
        els = [];
        while (a) {
          els.push(a);
          a = a.parentNode;
        }
        if (_ref = this.itemBox.itemBox, __indexOf.call(els, _ref) < 0) {
          return this.itemBox.hide();
        }
      }
    };

    HoverBox.prototype._moveMouse = function(e) {
      this.hoverBox.style.top = "" + (e.pageY + 28) + "px";
      return this.hoverBox.style.left = "" + (e.pageX - 154) + "px";
    };

    HoverBox.prototype._clickItem = function(e) {
      this.itemBox.show(e.target);
      e.preventDefault();
      return e.stopPropagation();
    };

    return HoverBox;

  })();

  setCookie = function(name, value, days) {
    var date, expires;
    expires = '';
    if (days) {
      date = new Date();
      date.setDate(date.getDate() + days);
      expires = ";expires=" + (date.toUTCString());
    }
    return document.cookie = "" + name + "=" + value + expires;
  };

  getCookie = function(name) {
    var cookie, cookies, _i, _len;
    cookies = document.cookie.split(';');
    for (_i = 0, _len = cookies.length; _i < _len; _i++) {
      cookie = cookies[_i];
      while (cookie[0] === ' ') {
        cookie = cookie.slice(1);
      }
      if (cookie.slice(0, name.length) === name) {
        return cookie.slice(name.length + 1);
      }
    }
  };

  ajax = function(url, callback) {
    var ajaxRequest;
    ajaxRequest = getAjaxRequest(callback);
    ajaxRequest.open("GET", url, true);
    ajaxRequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    return ajaxRequest.send(null);
  };

  postAjax = function(url, data, callback) {
    var ajaxRequest, dataList, name, value;
    ajaxRequest = getAjaxRequest(callback);
    ajaxRequest.open("POST", url, true);
    ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    dataList = [];
    for (name in data) {
      value = data[name];
      dataList.push("" + name + "=" + value);
    }
    return ajaxRequest.send(dataList.join('&'));
  };

  getAjaxRequest = function(callback) {
    var ajaxRequest, e;
    try {
      ajaxRequest = new XMLHttpRequest();
    } catch (_error) {
      e = _error;
      try {
        ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (_error) {
        e = _error;
        try {
          ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (_error) {
          e = _error;
          return null;
        }
      }
    }
    ajaxRequest.onreadystatechange = function() {
      if (ajaxRequest.readyState === 4) {
        return callback(ajaxRequest.responseText);
      }
    };
    return ajaxRequest;
  };

  root.ItemBox = ItemBox;

  root.HoverBox = HoverBox;

  root.getCookie = getCookie;

  root.setCookie = setCookie;

}).call(this);

/*
//@ sourceMappingURL=tf2.map
*/
